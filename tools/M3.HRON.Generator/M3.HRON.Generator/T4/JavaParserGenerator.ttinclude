<#@ include file="JavaHeader.ttinclude" #>

package org.m3.hron;

<#

    var defaultState = model
        .FirstOrDefault (ps => ps.IsDefault) ?? new ParserState ("<DefaultState>", isDefault:true);
#>

enum ScannerState {
<#
foreach (var parserState in model)
{
#>
    <#=parserState.Name#>,
<#
}
#>
}

enum ScannerStateTransition {
<#
foreach (var parserState in model)
{
    foreach (var name in parserState.AllStates(defaultState).SelectMany (nps => nps.Names))
    {
#>
    From_<#=parserState.Name#>__To_<#=name#>,
<#
    }
}
#>
}

enum ScannerStateChoice {
<#
foreach (var parserState in model)
{
    foreach (var nextParserState in parserState.ChoiceStates(defaultState))
    {
#>
    From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#>,
<#
    }
}
#>
}

enum ScannerResult {
    Error   ,
    Continue,
    Done    ,
}

class Scanner extends BaseScanner {
    public ScannerResult  result            ;
    public ScannerState   state             ;
    public String         currentLine       ;
    public int            currentLineBegin  ;
    public int            currentLineEnd    ;
    public char           currentChar       ;

    @Override
    public void init (ScannerState initialState) {
        super.init (initialState);
        result          = ScannerResult.Continue;
        state           = initialState          ;
        currentLine     = ""                    ;
        currentLineBegin= 0                     ;
        currentLineEnd  = 0                     ;
        currentChar     = ' '                   ;
    }

    ScannerResult acceptLine (String line) {
        currentLine       = line          ;
        currentLineBegin  = 0             ;
        currentLineEnd    = line.length() ;
        currentChar       = ' '           ;

        scannerBeginLine ();

        for (int iter = currentLineBegin; iter < currentLineEnd; ++iter)
        {
            currentChar = currentLine.charAt (iter);
/*
apply:
        if (ss->result != SR_Continue)
        {
            break;
        }

        switch (ss->state)
        {
<#
    foreach (var parserState in model)
    {
#>
        case SS_<#=parserState.Name#>:
            switch (ss->current_char)
            {
<#
    foreach (var nextParserState in parserState.NextStates (defaultState))
    {
        if (nextParserState.IsDefaultCase)
        {
#>
            default:
<#
        }
        else
        {
            foreach (var ch in nextParserState.Characters)
            {
#>
            case <#=GetCase(ch)#>:
<#
            }
        }
        if (nextParserState.IsChoice)
        {
            OutputStateChoice (parserState, nextParserState);
#>

                switch (ss->state)
                {
<#
        foreach (var name in nextParserState.Names)
        {
#>
                case SS_<#=name#>:
<#
                        OutputStateTransition (parserState, name);
#>
                    break;
<#
        }
#>
                    default:
                        ss->result = SR_Error;
                        break;
                    }
<#
        }
        else
        {
            var name = nextParserState.Names[0];
            if (name != parserState.Name)
            {
#>
                    ss->state = SS_<#=name#>;
<#
            }
            OutputStateTransition (parserState, name);
        }
    if (nextParserState.HandOver)
    {
#>
                    goto apply;
<#
    }
#>
                    break;
<#
    }
#>
                }
            break;
<#
    }
#>
        default:
            ss->result = SR_Error;
            break;
        }
    }

    if (ss->result == SR_Error)
    {
        goto end;
    }

    switch (ss->state)
    {
<#
    foreach (var parserState in model.Where (ps => ps.Any (nps => nps.IsTerminator)))
    {
#>
    case SS_<#=parserState.Name#>:
<#
        var nextParserState = parserState.First (nps => nps.IsTerminator);
        if (nextParserState.IsChoice)
        {
            OutputStateChoice (parserState, nextParserState);
#>

        switch (ss->state)
        {
<#
        foreach (var name in nextParserState.Names)
        {
#>
        case SS_<#=name#>:
<#
            OutputStateTransition (parserState, name);
#>
            break;
<#
        }
#>
        default:
            ss->result = SR_Error;
            break;
    }
<#
        }
        else
        {
            var name = nextParserState.Names[0];
            if (name != parserState.Name)
            {
#>
            ss->state = SS_<#=name#>;
<#
            }
            OutputStateTransition (parserState, name);
        }
#>
        break;
<#
    }
#>
    }

end:
*/      
        }

        scannerEndLine ();

        return result;
    }
}


<#@ include file="ParserGenerator.ttinclude"#>

<#+
    void OutputStateChoice (ParserState parserState, NextParserState nextParserState)
    {
#>
                    scanner_statechoice (
                            ss
                        ,   SSC_From_<#=parserState.Name#>__Choose_<#=string.Join ("_", nextParserState.Names)#>
                        );
<#+
    }
#>

<#+
    void OutputStateTransition (ParserState parserState, string to)
    {
#>
                            scanner_statetransition (
                                    ss
                                ,   SS_<#=parserState.Name#>
                                ,   SS_<#=to#>
                                ,   SST_From_<#=parserState.Name#>__To_<#=to#>
                                );
<#+
    }
#>
